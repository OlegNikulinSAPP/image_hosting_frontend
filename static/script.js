// script.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ DOMContentLoaded
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')

    const heroPage = document.getElementById('hero-page');
    const mainAppPage = document.getElementById('main-app-page');
    const gotoAppButton = document.getElementById('goto-app-button');
    const navButtons = document.querySelectorAll('.app-nav__button');

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ä–∞–±–æ—Ç—É document.querySelectorAll('.app-nav__button');
    console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ navButtons (NodeList):')
    for (const button of navButtons) {
        console.log(button)
    }

    const uploadView = document.getElementById('upload-view');
    const imagesView = document.getElementById('images-view');
    const dropZone = document.getElementById('upload-drop-zone');
    const fileInput = document.getElementById('file-input');
    const browseBtn = document.getElementById('browse-btn');
    const uploadError = document.getElementById('upload-error');
    const urlInput = document.getElementById('url-input');
    const copyBtn = document.getElementById('copy-btn');

    const imageList = document.getElementById('image-list');
    const imageItemTemplate = document.getElementById('image-item-template');

    const API_BASE_URL = window.location.origin; // –±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞

    // –î—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ window.location
    console.log('–î—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ window.location:')
    console.log('–±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞:', window.location.origin)
    console.log('–ø–æ–ª–Ω—ã–π URL:', window.location.href )
    console.log('–ø—Ä–æ—Ç–æ–∫–æ–ª (http:, https:):', window.location.protocol )
    console.log('—Ö–æ—Å—Ç —Å –ø–æ—Ä—Ç–æ–º:', window.location.host)
    console.log('—Ç–æ–ª—å–∫–æ –∏–º—è —Ö–æ—Å—Ç–∞:', window.location.hostname)
    console.log('–ø–æ—Ä—Ç:', window.location.port)
    console.log('–ø—É—Ç—å:', window.location.pathname)
    console.log('–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (?key=value):', window.location.search)
    console.log('—è–∫–æ—Ä—å (#section):', window.location.hash)

    let uploadedImages = []; // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö

    // –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    function setRandomHeroImage() {
        const images = [
            'images/bird.png',
            'images/cat.png',
            'images/dog1.png',
            'images/dog2.png',
            'images/dog3.png'
        ];
        const randomIndex = Math.floor(Math.random() * images.length);
        const randomImage = images[randomIndex];
        heroPage.style.backgroundImage = `url(${randomImage})`;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    gotoAppButton.addEventListener('click', () => {
        heroPage.classList.add('hidden');
        mainAppPage.classList.remove('hidden');
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            const view = button.dataset.view;
            navButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            if (view === 'upload') {
                uploadView.classList.remove('hidden');
                imagesView.classList.add('hidden');
            } else {
                uploadView.classList.add('hidden');
                imagesView.classList.remove('hidden');
                loadImagesList();
            }
        });
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    function handleFileUpload(file) {
        urlInput.value = '';
        uploadError.classList.add('hidden');

        const formData = new FormData();
        formData.append('file', file);

        // –õ–æ–≥–∏—Ä—É–µ–º FormData
        console.log('FormData contents:');
        for (let [key, value] of formData.entries()) {
            console.log(`üîë ${key}:`);
            console.log('  üìù –ò–º—è —Ñ–∞–π–ª–∞:', value.name);
            console.log('  üì¶ MIME-—Ç–∏–ø:', value.type);
            console.log('  üìä –†–∞–∑–º–µ—Ä:', value.size, '–±–∞–π—Ç');
            console.log('  üóÇÔ∏è  –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:', value instanceof File ? 'File' : typeof value);
            console.log('---');
        }

        fetch('/upload', {
            method: 'POST',
            body: formData
        })
        .then(response => {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Response
            console.log('=== RESPONSE DETAILS ===');
            console.log('URL:', response.url);
            console.log('Status:', response.status);
            console.log('Status Text:', response.statusText);
            console.log('OK:', response.ok);
            console.log('Redirected:', response.redirected);
            console.log('Type:', response.type);

            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            console.log('Headers:');
            response.headers.forEach((value, name) => {
            console.log(`  ${name}: ${value}`);
            });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º promise —Å JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    return response.json();
})
        .then(data => {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ –æ–±—ä–µ–∫—Ç JavaScript
            console.log('=== RESPONSE JavaScript ===');
            for (let [key, value] of Object.entries(data)) {
                console.log(key, value);
            }

            if (data.status === 'success') {
                const fullUrl = `${API_BASE_URL}${data.url}`;
                urlInput.value = fullUrl;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                const imageInfo = {
                    id: Date.now(),
                    name: data.original_name,
                    url: data.url,
                    fullUrl: fullUrl,
                    filename: data.filename,
                    size: data.size,
                    uploadedAt: new Date().toISOString()
                };

                uploadedImages.push(imageInfo);
                saveImagesToLocalStorage();

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showNotification('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');
            } else {
                uploadError.textContent = data.message;
                uploadError.classList.remove('hidden');
                showNotification(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            uploadError.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞';
            uploadError.classList.remove('hidden');
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞', 'error');
        });
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;

        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 5px;
            color: white;
            z-index: 1000;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        `;

        if (type === 'success') {
            notification.style.backgroundColor = '#28a745';
        } else if (type === 'error') {
            notification.style.backgroundColor = '#dc3545';
        } else {
            notification.style.backgroundColor = '#17a2b8';
        }

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transition = 'opacity 0.5s';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    // –†–∞–±–æ—Ç–∞ —Å localStorage (—á–∏—Ç–∞–µ–º –∏–∑ localStorage)
    function loadImagesFromLocalStorage() {
        storedImages = localStorage.getItem('uploadedImages')

        if (storedImages) {
            try {
                uploadedImages = JSON.parse(storedImages);
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', uploadedImages.length);
            } catch (e) {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ "uploadedImages"', e);
                uploadedImages = [];
            }
        }
    }

    function saveImagesToLocalStorage() {
        localStorage.setItem('uploadedImages', JSON.stringify(uploadedImages));
    }

   // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function loadImagesList() {
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏
    imageList.innerHTML = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (uploadedImages.length === 0) {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        imageList.innerHTML = `
            <div style="text-align:center; color: var(--text-muted); padding: 40px;">
                <i class="fas fa-image" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                <p>No images uploaded yet.</p>
                <p style="font-size: 14px; margin-top: 8px;">Upload your first image to get started!</p>
            </div>
        `;
        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –¥–∞–ª—å—à–µ –Ω–µ—á–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        return;
    }

    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å—Ç—å, –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ uploadedImages
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
    uploadedImages.forEach(image => {
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML-—à–∞–±–ª–æ–Ω–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // cloneNode(true) —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const templateClone = imageItemTemplate.content.cloneNode(true);

        // –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ –∫–ª–æ–Ω–µ —à–∞–±–ª–æ–Ω–∞
        const listItem = templateClone.querySelector('.image-item');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç
        listItem.dataset.id = image.id;
        console.log('–¢–µ–∫—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä:', image.id)

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        listItem.querySelector('.image-item__name span').textContent = image.name;
        console.log('–≠–ª–µ–º–µ–Ω—Ç—É –Ω–æ–º–µ—Ä', image.id, '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è:', image.name);

        // –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ—ë –¥–∞–Ω–Ω—ã–º–∏
        const urlLink = listItem.querySelector('.image-item__url a');
        urlLink.href = image.fullUrl; // URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        urlLink.textContent = image.fullUrl; // –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
        urlLink.target = '_blank'; // –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        urlLink.rel = 'noopener noreferrer'; // –ó–∞—â–∏—Ç–∞ –æ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        const sizeInfo = document.createElement('small');
        sizeInfo.textContent = ` (${formatFileSize(image.size)})`; // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
        sizeInfo.style.color = 'var(--text-muted)'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ü–≤–µ—Ç–∞
        sizeInfo.style.marginLeft = '8px'; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        listItem.querySelector('.image-item__name').appendChild(sizeInfo);

        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        imageList.appendChild(templateClone);
    });
}

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    browseBtn.addEventListener('click', () => fileInput.click());

    dropZone.addEventListener('click', (e) => {
        if (e.target === dropZone || e.target.classList.contains('upload-icon')) {
            fileInput.click();
        }
    });

    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            handleFileUpload(file);
        }
    });

    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });

    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('dragover');
    });

    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        if (e.dataTransfer.files.length > 0) {
            const file = e.dataTransfer.files[0];
            handleFileUpload(file);
        }
    });

    copyBtn.addEventListener('click', () => {
        if (urlInput.value) {
            navigator.clipboard.writeText(urlInput.value).then(() => {
                const originalText = copyBtn.textContent;
                copyBtn.textContent = 'COPIED!';
                copyBtn.style.backgroundColor = '#28a745';

                setTimeout(() => {
                    copyBtn.textContent = originalText;
                    copyBtn.style.backgroundColor = '';
                }, 2000);
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            });
        }
    });

    imageList.addEventListener('click', (e) => {
        const deleteButton = e.target.closest('.delete-btn');
        if (deleteButton) {
            const listItem = e.target.closest('.image-item');
            const imageId = parseInt(listItem.dataset.id, 10);

            if (confirm('Are you sure you want to delete this image?')) {
                uploadedImages = uploadedImages.filter(img => img.id !== imageId);
                saveImagesToLocalStorage();
                loadImagesList();
                showNotification('Image deleted', 'success');
            }
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadImagesFromLocalStorage();
    setRandomHeroImage();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    fetch('/')
        .then(response => {
            if (!response.ok) {
                console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        });
});
